"""
Це приклад невеликої програми для малювання кругів і квадратів.
Вам потрібно на основі цієї програми зробити невелику "танцювальну" сценку з
використанням кругів, квардратів і трикутників. Зробити все це потрібно в
об’єктно-орієнтованому стилі.

Які класи потрібно реалізувати:

- Багатокутник (на його основі зробити квадрат і правильний трикутник)
-- клас повинен вміти відрисовувати себе
-- переміщатися в деякому напряику заданому координатами x, y
-- збільшуватися (необов’язково)
-- повертатися (необов’язково)

- Квардрат (успадковується від багаткутника)
-- метод __init__ приймає координати середини, ширину і колір

- Трикутник (успадковується від багатокутника)
-- метод __init__ приймає координати середини, довжини сторони і колір

- Коло
-- метод __init__ приймає координати середини, радіус і колір
-- клас повинен вміти відрисовувати себе
-- преміщатися в деякому напрямку заданому координатами x, y
-- збільшуватися (необов’язково)

Також рекомендую створити додатковий клас Vector для представлення
точок на площині і різних операцій з ними - додавання, множення на число,
віднімання.


Із створених класів потрібно скласти якусь динамічну сцену.
"""

import turtle
import time
import random


def draw_rect(ttl):
    x = random.randint(-200, 200) # отримуємо випадкові координати
    y = random.randint(-200, 200)

    ttl.color('red') # встановлюємо колір лінії
    ttl.penup() # забираємо "ручку" від полотна, щоб перемістити в потрібне місце
    ttl.setpos(x, y) # переміщаємо на першу вершину
    ttl.pendown() # опускаєм ручку назад
    ttl.goto(x + 50, y) # проводимо лінії для сторін чотирьохкутника
    ttl.goto(x + 50, y + 50)
    ttl.goto(x, y + 50)
    ttl.goto(x, y)

def draw_circle(ttl):
    x = random.randint(-200, 200) # отримуємо випадкові координати
    y = random.randint(-200, 200)

    ttl.color('violet') # встановлюємо колір лінії
    ttl.penup() # забираємо "ручку" від полотна, щоб перемістити в потрібне місце
    ttl.setpos(x, y) # переміщаємо в "основу" - це буде сама низька точка
    ttl.pendown() # опускаєм ручку назад

    ttl.circle(25) # рисуємо коло радіусу 25



def main():

    turtle.tracer(0, 0) # встановлюємо всі затримки в 0, щоб рисувалося миттєво
    turtle.hideturtle() # забираємо точку на середині

    ttl = turtle.Turtle() # створюємо об’єкт черепашки для рисування
    ttl.hideturtle() # робимо її невидимою

    while True:
        time.sleep(0.5) # засипаємо на пів секунди, щоб побачити що нарисували
        ttl.clear() # очищаєм все нарисоване раніше
        draw_rect(ttl)
        draw_circle(ttl)
        turtle.update() # так як зробили turtle.tracer(0, 0) потрібно оновити екран, щоб побачити нарисоване

if __name__ == '__main__':
    main()
